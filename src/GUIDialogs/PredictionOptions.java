package src.GUIDialogs;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * This class extends JDialog and asks the user which prediction options they would like.
 * These options are then saved once the JDialog has been closed.
 */
public class PredictionOptions extends JDialog {
    private JRadioButton preMadeDataRadioButton;
    private JRadioButton blankCanvasRadioButton;
    private JRadioButton radioButton1;
    private JRadioButton radioButton2;
    private JButton saveButton;
    private JPanel rootPanel;
    private int noPredictions;
    private boolean isBlank;

    /**
     * This method sets the size and name of the JDialog.
     * The radio buttons are also added as well as their listeners.
     */
    public PredictionOptions() {
        this.setTitle("Prediction Options");
        this.setSize(660, 250);
        this.setLocation(200, 200);
        this.add(rootPanel);

        ButtonGroup bgNoPredictions = new ButtonGroup();
        radioButton1.setActionCommand("1");
        radioButton2.setActionCommand("2");
        bgNoPredictions.add(radioButton1);
        bgNoPredictions.add(radioButton2);
        radioButton2.setSelected(true);

        ButtonGroup bgDisplayType = new ButtonGroup();
        preMadeDataRadioButton.setActionCommand("PreMade");
        blankCanvasRadioButton.setActionCommand("BlankCanvas");
        bgDisplayType.add(preMadeDataRadioButton);
        bgDisplayType.add(blankCanvasRadioButton);
        blankCanvasRadioButton.setSelected(true);

        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (bgNoPredictions.getSelection().getActionCommand().equals("1")) { // set number of predictions
                    noPredictions = 1;
                } else {
                    noPredictions = 2;
                }

                isBlank = bgDisplayType.getSelection().getActionCommand().equals("BlankCanvas"); // true/false for isBlank

                setVisible(false);
            }
        });

    }

    /**
     * This gets the users selected number of predictions.
     *
     * @return the users selected number of predictions.
     */
    public int getNoPredictions() {
        return noPredictions;
    }

    /**
     * Gets the users selection for using current data or random data.
     *
     * @return Returns the users choice if they want to use current data or random data.
     */
    public boolean getIsBlank() {
        return isBlank;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Would you like to use the current data for predictions or have pre-made Stacks and Queues to work from?");
        rootPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        blankCanvasRadioButton = new JRadioButton();
        blankCanvasRadioButton.setText("Current Data");
        rootPanel.add(blankCanvasRadioButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButton2 = new JRadioButton();
        radioButton2.setText("2");
        rootPanel.add(radioButton2, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButton1 = new JRadioButton();
        radioButton1.setText("1");
        rootPanel.add(radioButton1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Progress to harder qestions after answering questions on a group of operations correctly 1 or 2 times?");
        rootPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        preMadeDataRadioButton = new JRadioButton();
        preMadeDataRadioButton.setText("Pre-Made Data");
        rootPanel.add(preMadeDataRadioButton, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        rootPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(25, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        rootPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, new Dimension(15, -1), null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        rootPanel.add(saveButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
